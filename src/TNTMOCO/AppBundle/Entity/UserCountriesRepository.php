<?php

namespace TNTMOCO\AppBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Form\FormError;

/**
 * UserCountriesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserCountriesRepository extends EntityRepository
{
	public function removeUserCountries($user) 
	{	
		$em = $this->getEntityManager();
		$userCountries = $this->findByUser($user);		
		foreach ($userCountries as $userCountry){
			$em->remove($userCountry);
		}	
	}
	
	public function setUserFormField($form, $admin = false)
	{
		if($admin){
			$form->add(
				'role', 'entity', array(
				'label' => 'Role',
				'multiple' => false,
				'expanded' => false,
				'class' => 'TNTMOCOAppBundle:Role',
				'property' => 'name',
				'query_builder' => function(EntityRepository $er) {
					return $er->createQueryBuilder('r')
					->where('r.id = 2');
				},
				'attr' => array('class' => 'hidden'),
			));
		}
		else{
			$form->add(
				'role', 'entity', array(
				'label' => 'Role',
				'multiple' => false,
				'expanded' => false,
				'class' => 'TNTMOCOAppBundle:Role',
				'property' => 'name',
				'query_builder' => function(EntityRepository $er) {
					return $er->createQueryBuilder('r')
					->where('r.id > 2');
				},
			));
		}
		$form->add('country', 'entity', array(
				'label' => 'Country',
				'required' => false,
				'multiple' => false,
				'expanded' => false,
				'empty_value' => 'Choose a Country',
				'class' => 'TNTMOCOAppBundle:Country',
				'property' => 'name',
				'query_builder' => function(EntityRepository $er) {
					return $er->createQueryBuilder('c')
					->where('c.isActive = 1');
				},
				'attr' => array('class' => 'hidden chooseCountryId'),
		));
		
		return $form;
	}
	
	public function saveUser($form, $request, $user, $securityEncoder){
		$cleanForm = $form;
		$nameForm = ($request->get('user')['role'] == 2) ? 'adminForm' : 'userForm';
		$created = false;
		$originalEncodedPassword = $user->getPassword();
		$userRepo = $this->getEntityManager()->getRepository('TNTMOCOAppBundle:User');
		$depotRepo = $this->getEntityManager()->getRepository('TNTMOCOAppBundle:Depot');
		$userCountriesRepo = $this->getEntityManager()->getRepository('TNTMOCOAppBundle:UserCountries');
		$em = $this->getEntityManager();
		
		$form->handleRequest($request);
		//var_dump($form->isValid());die;
		if($form->isValid()){			
			$isExistUsername = $userRepo->findOneByUsername($user->getUsername());
			$isExistEmail = $userRepo->findOneByEmail($user->getEmail());
			if(($isExistUsername and $isExistUsername->getId() !== $user->getId()) or ($isExistEmail and $isExistEmail->getId() !== $user->getId())){
				if($isExistUsername and $isExistUsername->getId() !== $user->getId()){
					$form->get('username')->addError(new FormError('Username is already exists'));
				}
				if($isExistEmail and $isExistEmail->getId() !== $user->getId()){
					$form->get('email')->addError(new FormError('Email is already exists'));
				}
			}else{
				$userRepo->setUserPassword($user, $securityEncoder, $originalEncodedPassword);
				$userRoleSystemName = $user->getRole()->getRole();
				switch ($userRoleSystemName){
					case 'ROLE_COUNTRY_ADMIN':
						$user->addCountry($user->getCountry());
						$user->setCountry(null);
						$user->setDepot(null);
						$userRepo->createUserCountriesCollection($user);
							
						if($request->get('confirm')){
							$userRepo->unassignUsersAssignedToUserCountries($user);
						}
						else{
							
							$alreadyAssignedAdmins = $userRepo->getUsersAssignedToUserCountries($user);
							
							if(count($alreadyAssignedAdmins) > 0){
								return array(
									$nameForm => $form->createView(),
									'created' => $created,
									'alreadyAssignedAdmins' => $alreadyAssignedAdmins,
									'userShouldConfirmAssigning' => true,
								);
							}
						}
						break;
				
					case 'ROLE_COURIER':					
					case 'ROLE_USER':
					case 'ROLE_CUSTOMER_SERVICE':
						$user->setDepot(null);
						break;
				}			
				$userCountriesRepo->removeUserCountries($user);
				$em->persist($user);
				$em->flush();
				
				$form = $cleanForm;			
				$created = true;
			}
		}
		
		return array(
    		$nameForm => $form->createView(),
    		'created' => $created,
			'user' => $user, 
    		'userShouldConfirmAssigning' => false,
    	);
	}
		
}
