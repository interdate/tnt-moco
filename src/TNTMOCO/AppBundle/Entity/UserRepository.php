<?php

namespace TNTMOCO\AppBundle\Entity; 

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;

//use TNTMOCO\AppBundle\Entity\Role;


/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserProviderInterface
{
	public function loadUserByUsername($username){
		$q = $this
		->createQueryBuilder('u')
		->where('u.username = :username')
		->setParameter('username', $username)
		->getQuery()
		;
	
		try {
			// The Query::getSingleResult() method throws an exception
			// if there is no record matching the criteria.
			$user = $q->getSingleResult();
		} catch (NoResultException $e) {
			$message = sprintf(
				'Unable to find an active admin TNTMOCOAppBundle:User object identified by "%s".',
				$username
			);
			throw new UsernameNotFoundException($message, 0, $e);
		}
	
		return $user;
	}
	
	public function refreshUser(UserInterface $user){
		$class = get_class($user);
		if (!$this->supportsClass($class)) {
			throw new UnsupportedUserException(
				sprintf(
					'Instances of "%s" are not supported.',
					$class
				)
			);
		}
	
		return $this->find($user->getId());
	}
	
	public function supportsClass($class){
		return $this->getEntityName() === $class
		|| is_subclass_of($class, $this->getEntityName());
	}
	
	
	
	
	
	public function getUsersAssignedToUserCountries($inspectedUser){				
		
		//$users = $this->findByRole($inspectedUser->getRole());		
		
		//$this->findByCountryJoinedToUserCountries($country);
		
		
		$countries = array();		
		foreach ($inspectedUser->getCountries() as $userCountry){
			$countries[] = ($userCountry instanceof Country) ? $userCountry->getId() : $userCountry->getCountry()->getId();
		}
		
		if(count($countries) == 0)
			return $countries;
		
		//echo count($inspectedUser->getCountries());
		//die;
		
		$qb = $this->createQueryBuilder('u');
		
		$query = $qb->where('u.role = :role')
			
			->andWhere(
				$qb->expr()->in('uc.country',  $countries)
			)			
			->join('u.countries', 'uc')			
			->join('uc.country', 'c')				
			->setParameter('role', $inspectedUser->getRole())			
			->getQuery();
		;
		
		$users = $query->getResult();
		
		return $users;
		
		
		
		/*
		
		foreach ($users as $user){			
			echo '<strong>' . $user->getUsername() . '</strong>: <br>';
			foreach ($user->getCountries() as $c){
				echo $c->getId() . '=>' . $c->getCountry()->getName() . '<br>';
			}
		}
		
		die;
		*/
		
		/*
		foreach ($users as $user){
			
			echo '<strong>' . $user->getUsername() . '</strong>: <br>';
			foreach ($user->getCountries() as $c){
				echo $c->getCountry()->getName() . '<br>';
			}
			 
			
			foreach ($inspectedUser->getCountries() as $inspectedUserCountry){
				foreach ($user->getCountries() as $country){
					
				}
				
				
				
				if($user->getCountries()->contains($userCountry) && !in_array($user, $assignedUsers)){
					echo "TEST58888899999";
					die;
					$assignedUsers[] = $user;
				}
						
			}
		}
		*/		
		
		
		return $assignedUsers;
	}
	
	
}
