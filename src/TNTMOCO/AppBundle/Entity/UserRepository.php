<?php

namespace TNTMOCO\AppBundle\Entity; 

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;

//use TNTMOCO\AppBundle\Entity\Role;


/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserProviderInterface
{
	public function loadUserByUsername($username)
	{
		$q = $this
		->createQueryBuilder('u')
		->where('u.username = :username')
		->setParameter('username', $username)
		->getQuery()
		;
	
		try {
			// The Query::getSingleResult() method throws an exception
			// if there is no record matching the criteria.
			$user = $q->getSingleResult();
		} catch (NoResultException $e) {
			$message = sprintf(
				'Unable to find an active admin TNTMOCOAppBundle:User object identified by "%s".',
				$username
			);
			throw new UsernameNotFoundException($message, 0, $e);
		}
	
		return $user;
	}
	
	public function refreshUser(UserInterface $user)
	{
		$class = get_class($user);
		if (!$this->supportsClass($class)) {
			throw new UnsupportedUserException(
				sprintf(
					'Instances of "%s" are not supported.',
					$class
				)
			);
		}
	
		return $this->find($user->getId());
	}
	
	public function supportsClass($class)
	{
		return $this->getEntityName() === $class
		|| is_subclass_of($class, $this->getEntityName());
	}	
	
	public function getUsersAssignedToUserCountries($inspectedUser)
	{
		
		$countries = array();		
		foreach ($inspectedUser->getCountries() as $userCountry){
			$countries[] = ($userCountry instanceof Country) ? $userCountry->getId() : $userCountry->getCountry()->getId();
		}
		
		if(count($countries) == 0)
			return $countries;
		
		
		$qb = $this->createQueryBuilder('u');
		
		$qb->where('u.role = :role')						
			->andWhere(
				$qb->expr()->in('uc.country',  $countries)
			)
			->join('u.countries', 'uc')			
			->join('uc.country', 'c')				
			->setParameter('role', $inspectedUser->getRole())
		;
		
		$userId = $inspectedUser->getId();
		if(!empty($userId)){
			$qb->andWhere('uc.user <> :user')->setParameter('user', $inspectedUser);
		}
		
		$query = $qb->getQuery();
				
		$users = $query->getResult();
		
		return $users;
	}
	
	public function unassignUsersAssignedToUserCountries($user) 
	{	
		$em = $this->getEntityManager();
		$alreadyAssignedAdmins = $this->getUsersAssignedToUserCountries($user);
		
		foreach ($user->getCountries() as $userCountry ){
			$userCountries[] = $userCountry->getCountry();
		}
			
		foreach ($alreadyAssignedAdmins as $admin){
			foreach ($admin->getCountries() as $adminCountry){
				if(in_array($adminCountry->getCountry(),  $userCountries)){
					$em->remove($adminCountry);
				}
			}		
		}
	}
	
	public function setUserPassword($user, $factory, $encodedPassword)
	{
		$password = $user->getPassword();
		$encoder = $factory->getEncoder($user);		
		
		if(!empty($password)){ 
			$encodedPassword = $encoder->encodePassword($password, $user->getSalt());
			$user->setIsNonLocked(true);
		}	
		
		$user->setPassword($encodedPassword);
	}
	
	public function createUserCountriesCollection($user)
	{		
		foreach ($user->getCountries() as $country){
			if($country instanceof Country){
				$userCountry = new UserCountries();
				$userCountry->setUser($user);
				$userCountry->setCountry($country);
				$user->removeCountry($country);
				$user->addCountry($userCountry);
			}
		}		
	}
	
}
