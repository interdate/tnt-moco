<?php

namespace TNTMOCO\AppBundle\Entity; 

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;

//use TNTMOCO\AppBundle\Entity\Role;


/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserProviderInterface
{
	public function loadUserByUsername($username)
	{
		$q = $this
		->createQueryBuilder('u')
		->where('u.username = :username')
		->setParameter('username', $username)
		->getQuery()
		;
	
		try {
			// The Query::getSingleResult() method throws an exception
			// if there is no record matching the criteria.
			$user = $q->getSingleResult();
		} catch (NoResultException $e) {
			$message = sprintf(
				'Unable to find an active admin TNTMOCOAppBundle:User object identified by "%s".',
				$username
			);
			throw new UsernameNotFoundException($message, 0, $e);
		}
	
		return $user;
	}
	
	public function refreshUser(UserInterface $user)
	{
		$class = get_class($user);
		if (!$this->supportsClass($class)) {
			throw new UnsupportedUserException(
				sprintf(
					'Instances of "%s" are not supported.',
					$class
				)
			);
		}
	
		return $this->find($user->getId());
	}
	
	public function supportsClass($class)
	{
		return $this->getEntityName() === $class
		|| is_subclass_of($class, $this->getEntityName());
	}	
	
	public function getUsersAssignedToUserCountries($inspectedUser)
	{
		
		$countries = array();		
		foreach ($inspectedUser->getCountries() as $userCountry){
			$countries[] = ($userCountry instanceof Country) ? $userCountry->getId() : $userCountry->getCountry()->getId();
		}
		
		if(count($countries) == 0)
			return $countries;
		
		
		$qb = $this->createQueryBuilder('u');
		
		$qb->where('u.role = :role')						
			->andWhere(
				$qb->expr()->in('uc.country',  $countries)
			)
			->join('u.countries', 'uc')			
			->join('uc.country', 'c')				
			->setParameter('role', $inspectedUser->getRole())
		;
		
		$userId = $inspectedUser->getId();
		if(!empty($userId)){
			$qb->andWhere('uc.user <> :user')->setParameter('user', $inspectedUser);
		}
		
		$query = $qb->getQuery();
				
		$users = $query->getResult();
		
		return $users;
	}
	
	public function unassignUsersAssignedToUserCountries($user) 
	{	
		$em = $this->getEntityManager();
		$alreadyAssignedAdmins = $this->getUsersAssignedToUserCountries($user);
		
		foreach ($user->getCountries() as $userCountry ){
			$userCountries[] = $userCountry->getCountry();
		}
			
		foreach ($alreadyAssignedAdmins as $admin){
			foreach ($admin->getCountries() as $adminCountry){
				if(in_array($adminCountry->getCountry(),  $userCountries)){
					$em->remove($adminCountry);
				}
			}		
		}
	}
	
	public function setUserPassword($user, $factory, $encodedPassword, $userIsLogged = true)
	{
		$password = $user->getPassword();
		$encoder = $factory->getEncoder($user);		
		
		if(!empty($password)){ 
			$encodedPassword = $encoder->encodePassword($password, $user->getSalt());
			if($userIsLogged){
				$user->setIsNonLocked(true);
			}
		}	
		
		$user->setPassword($encodedPassword);
	}
	
	public function checkUserOldPassword($user, $factory, $encodedPassword)
	{
		$password = $user->getPassword();
		$oldPassword = $user->getOldPassword();
		$encoder = $factory->getEncoder($user);
		
		if(!empty($password) and !empty($oldPassword)){
			$encodedOldPassword = $encoder->encodePassword($oldPassword, $user->getSalt());
			if($encodedOldPassword != $encodedPassword){
				$user->setPassword('');
				return false;
			}			
		}
		if(!empty($password) and empty($oldPassword)){
			$user->setPassword('');
			return false;
		}
		return true;
	}
	
	public function createUserCountriesCollection($user)
	{		
		foreach ($user->getCountries() as $country){
			if($country instanceof Country){
				$userCountry = new UserCountries();
				$userCountry->setUser($user);
				$userCountry->setCountry($country);
				$user->removeCountry($country);
				$user->addCountry($userCountry);
			}
		}		
	}
	
	public function getSearchQuery($request, $currentUser, $depotsReturn = false)
	{
		$em = $this->getEntityManager();
		$countryRepo = $em->getRepository('TNTMOCOAppBundle:Country');
		$depotRepo = $em->getRepository('TNTMOCOAppBundle:Depot');
		$currentRole = $currentUser->getRole()->getId();
		
		$property = $request->get('property');
		$role = $request->get('role');
		$country_id = $request->get('country');
		$depot = $request->get('depot');
		 
		$field = $request->get('field');
		$value = $request->get('value');
		$date = $request->get('date');
		
		$where = array();
		
		if($currentRole > 1){
			$countries = $countryRepo->findByUser($currentUser);
			if(count($countries) > 1){
				foreach ($countries as $country){
					$country_ids[] = $country->getId();
				}
				$where[] = array('country',$country_ids);
			}
		}
		
		if($currentRole > 2 or ($currentRole == 2 and (int)$country_id > 0 and ((isset($country_ids) and !in_array($country_id, $country_ids)) or (count($countries) > 1 and $country_id != $countries[0]->getId())))){
			return $em->createQuery('SELECT u FROM TNTMOCOAppBundle:User u WHERE u.id = :id')->setParameter('id', 0);
		}
		
		if($depotsReturn){
			$depots = array();
			if($role == 5 and (int)$country_id > 0){
				$country = $countryRepo->find($country_id);
				$depots = $depotRepo->findByCountry($country);
			}
			return $depots;
		}
		if($property != null and $property != ''){
			$where[] = explode('.', $property);
		}
		if((int)$role > 0){
			$where[] = array('role',$role);
		}else{
			$where[] = array('role', $currentRole);
		}
		if((int)$country_id > 0){
			$where[] = array('country',$country_id);
		}
		if((int)$depot > 0){
			$where[] = array('depot',$depot);
		}
		if($field != null and $field != '' and $value != null and $value != ''){
			$where[] = array($field, '%' . $value . '%');
		}
		if(count($where) > 0){
			foreach ($where as $row){
				if($row[0] == 'country'){
					if(is_array($row[1])){
						foreach($row[1] as $key => $val){
							$countryWhere[] = 'u.' . $row[0] . ' = :' . $row[0] . $key . ' OR uc.' . $row[0] . ' = :countries' . $key;
						}
						$whereStrArr[] = ' (' . implode(' OR ', $countryWhere) . ')';
					}else{
						$whereStrArr[] = ' (u.' . $row[0] . ' = :' . $row[0] . ' OR uc.' . $row[0] . ' = :countries)';
					}
				}elseif((int)$row[1] == 0){
					$whereStrArr[] = ' u.' . $row[0] . ' LIKE :' . $row[0];
				}elseif($row[0] == 'role' and $row[1] == $currentRole){
					$whereStrArr[] = ' u.' . $row[0] . ' > :' . $row[0];
				}else{
					$whereStrArr[] = ' u.' . $row[0] . ' = :' . $row[0];
				}
			}
		}
		//$whereStrArr[] = ' u.role != :super';
		
		$whereStr = (count($where) > 0) ? ' WHERE' . implode(' AND', $whereStrArr) : '';
		$join = '';
		if((int)$country_id > 0 or isset($country_ids)){
			$join = ' LEFT JOIN u.countries uc';
		}
		
		if($date != null){
			$join .= ' LEFT JOIN u.pdfFiles pf';
			$whereStr .= ' AND pf.datetime > :date1 AND pf.datetime < :date2';
		}
		 
		$dql   = "SELECT u FROM TNTMOCOAppBundle:User u" . $join . $whereStr;
		//var_dump($dql);die;
		$query = $em->createQuery($dql);
		 
		if(count($where) > 0){
			foreach ($where as $row){
				if($row[0] == 'country' and is_array($row[1])){
					foreach($row[1] as $key => $val){
						$query->setParameter($row[0] . $key, $val);
						$query->setParameter('countries' . $key, $val);
					}
				}else{
					$query->setParameter($row[0], $row[1]);
					if($row[0] == 'country'){
						$query->setParameter('countries', $row[1]);
					}
				}
			}
		}
		if($date != null){
			$date = date('Y-m-d', strtotime($date));
			$query->setParameter('date1', $date);
			$query->setParameter('date2', date('Y-m-d', strtotime("+1 day", strtotime($date))));
		}
		//$query->setParameter('super', 1);
		return $query;
	}
	
	public function isFiledExists($field, $value, $user_id)
	{
		$method = 'findBy'. ucfirst($field);
		$users = $this->$method($value);
		if(count($users) > 1 or (count($users) == 1 and $users[0]->getId() !== $user_id)){
			return true;
		}
		return false;
	}
	
	public function sendMail($from, $to, $subject, $body, $mailer)
	{
		$message = \Swift_Message::newInstance()
		->setSubject($subject)
		->setFrom($from)
		->setTo($to)
		->setBody($body);
		$mailer->send($message);
	}
	
}
